// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IDMapServiceClient is the client API for IDMapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IDMapServiceClient interface {
	StoreIDV2(ctx context.Context, in *StoreIDRequest, opts ...grpc.CallOption) (*StoreIDResponse, error)
	RetrieveRowByIDV2(ctx context.Context, in *RetrieveRowByIDRequest, opts ...grpc.CallOption) (*RetrieveRowByIDResponse, error)
	WriteConfigV2(ctx context.Context, in *WriteConfigRequest, opts ...grpc.CallOption) (*WriteConfigResponse, error)
	ReadConfigV2(ctx context.Context, in *ReadConfigRequest, opts ...grpc.CallOption) (*ReadConfigResponse, error)
	UpdateVirtualValueV2(ctx context.Context, in *UpdateVirtualValueRequest, opts ...grpc.CallOption) (*UpdateVirtualValueResponse, error)
	RetrieveRealValueV2(ctx context.Context, in *RetrieveRealValueRequest, opts ...grpc.CallOption) (*RetrieveRealValueResponse, error)
	RetrieveRealValueV2Pro(ctx context.Context, in *RetrieveRealValueRequestPro, opts ...grpc.CallOption) (*RetrieveRealValueResponsePro, error)
	RetrieveVirtualValueV2(ctx context.Context, in *RetrieveVirtualValueRequest, opts ...grpc.CallOption) (*RetrieveVirtualValueResponse, error)
	StoreIDV2Pro(ctx context.Context, in *StoreIDProRequest, opts ...grpc.CallOption) (*StoreIDProResponse, error)
	RetrieveRowByIDV2Pro(ctx context.Context, in *RetrieveRowByIDProRequest, opts ...grpc.CallOption) (*RetrieveRowByIDProResponse, error)
	RetrieveVirtualValueV2Pro(ctx context.Context, in *RetrieveVirtualValueProRequest, opts ...grpc.CallOption) (*RetrieveVirtualValueProResponse, error)
	UpdateVirtualValueV2Pro(ctx context.Context, in *UpdateVirtualValueProRequest, opts ...grpc.CallOption) (*UpdateVirtualValueProResponse, error)
	SimplifiedStoreIDV2(ctx context.Context, in *SimplifiedStoreIDRequest, opts ...grpc.CallOption) (*SimplifiedStoreIDResponse, error)
	FindSubKeysByIdPro(ctx context.Context, in *FindSubKeysRequest, opts ...grpc.CallOption) (*FindSubKeysResponse, error)
	DeleteConfigV2(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigResponse, error)
	StoreCacheV2(ctx context.Context, in *StoreCacheRequest, opts ...grpc.CallOption) (*StoreCacheResponse, error)
	RetrieveRowByCacheV2(ctx context.Context, in *RetrieveRowByCacheRequest, opts ...grpc.CallOption) (*RetrieveRowByCacheResponse, error)
}

type iDMapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIDMapServiceClient(cc grpc.ClientConnInterface) IDMapServiceClient {
	return &iDMapServiceClient{cc}
}

func (c *iDMapServiceClient) StoreIDV2(ctx context.Context, in *StoreIDRequest, opts ...grpc.CallOption) (*StoreIDResponse, error) {
	out := new(StoreIDResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/StoreIDV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) RetrieveRowByIDV2(ctx context.Context, in *RetrieveRowByIDRequest, opts ...grpc.CallOption) (*RetrieveRowByIDResponse, error) {
	out := new(RetrieveRowByIDResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/RetrieveRowByIDV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) WriteConfigV2(ctx context.Context, in *WriteConfigRequest, opts ...grpc.CallOption) (*WriteConfigResponse, error) {
	out := new(WriteConfigResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/WriteConfigV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) ReadConfigV2(ctx context.Context, in *ReadConfigRequest, opts ...grpc.CallOption) (*ReadConfigResponse, error) {
	out := new(ReadConfigResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/ReadConfigV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) UpdateVirtualValueV2(ctx context.Context, in *UpdateVirtualValueRequest, opts ...grpc.CallOption) (*UpdateVirtualValueResponse, error) {
	out := new(UpdateVirtualValueResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/UpdateVirtualValueV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) RetrieveRealValueV2(ctx context.Context, in *RetrieveRealValueRequest, opts ...grpc.CallOption) (*RetrieveRealValueResponse, error) {
	out := new(RetrieveRealValueResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/RetrieveRealValueV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) RetrieveRealValueV2Pro(ctx context.Context, in *RetrieveRealValueRequestPro, opts ...grpc.CallOption) (*RetrieveRealValueResponsePro, error) {
	out := new(RetrieveRealValueResponsePro)
	err := c.cc.Invoke(ctx, "/IDMapService/RetrieveRealValueV2Pro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) RetrieveVirtualValueV2(ctx context.Context, in *RetrieveVirtualValueRequest, opts ...grpc.CallOption) (*RetrieveVirtualValueResponse, error) {
	out := new(RetrieveVirtualValueResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/RetrieveVirtualValueV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) StoreIDV2Pro(ctx context.Context, in *StoreIDProRequest, opts ...grpc.CallOption) (*StoreIDProResponse, error) {
	out := new(StoreIDProResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/StoreIDV2Pro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) RetrieveRowByIDV2Pro(ctx context.Context, in *RetrieveRowByIDProRequest, opts ...grpc.CallOption) (*RetrieveRowByIDProResponse, error) {
	out := new(RetrieveRowByIDProResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/RetrieveRowByIDV2Pro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) RetrieveVirtualValueV2Pro(ctx context.Context, in *RetrieveVirtualValueProRequest, opts ...grpc.CallOption) (*RetrieveVirtualValueProResponse, error) {
	out := new(RetrieveVirtualValueProResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/RetrieveVirtualValueV2Pro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) UpdateVirtualValueV2Pro(ctx context.Context, in *UpdateVirtualValueProRequest, opts ...grpc.CallOption) (*UpdateVirtualValueProResponse, error) {
	out := new(UpdateVirtualValueProResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/UpdateVirtualValueV2Pro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) SimplifiedStoreIDV2(ctx context.Context, in *SimplifiedStoreIDRequest, opts ...grpc.CallOption) (*SimplifiedStoreIDResponse, error) {
	out := new(SimplifiedStoreIDResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/SimplifiedStoreIDV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) FindSubKeysByIdPro(ctx context.Context, in *FindSubKeysRequest, opts ...grpc.CallOption) (*FindSubKeysResponse, error) {
	out := new(FindSubKeysResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/FindSubKeysByIdPro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) DeleteConfigV2(ctx context.Context, in *DeleteConfigRequest, opts ...grpc.CallOption) (*DeleteConfigResponse, error) {
	out := new(DeleteConfigResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/DeleteConfigV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) StoreCacheV2(ctx context.Context, in *StoreCacheRequest, opts ...grpc.CallOption) (*StoreCacheResponse, error) {
	out := new(StoreCacheResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/StoreCacheV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMapServiceClient) RetrieveRowByCacheV2(ctx context.Context, in *RetrieveRowByCacheRequest, opts ...grpc.CallOption) (*RetrieveRowByCacheResponse, error) {
	out := new(RetrieveRowByCacheResponse)
	err := c.cc.Invoke(ctx, "/IDMapService/RetrieveRowByCacheV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDMapServiceServer is the server API for IDMapService service.
// All implementations must embed UnimplementedIDMapServiceServer
// for forward compatibility
type IDMapServiceServer interface {
	StoreIDV2(context.Context, *StoreIDRequest) (*StoreIDResponse, error)
	RetrieveRowByIDV2(context.Context, *RetrieveRowByIDRequest) (*RetrieveRowByIDResponse, error)
	WriteConfigV2(context.Context, *WriteConfigRequest) (*WriteConfigResponse, error)
	ReadConfigV2(context.Context, *ReadConfigRequest) (*ReadConfigResponse, error)
	UpdateVirtualValueV2(context.Context, *UpdateVirtualValueRequest) (*UpdateVirtualValueResponse, error)
	RetrieveRealValueV2(context.Context, *RetrieveRealValueRequest) (*RetrieveRealValueResponse, error)
	RetrieveRealValueV2Pro(context.Context, *RetrieveRealValueRequestPro) (*RetrieveRealValueResponsePro, error)
	RetrieveVirtualValueV2(context.Context, *RetrieveVirtualValueRequest) (*RetrieveVirtualValueResponse, error)
	StoreIDV2Pro(context.Context, *StoreIDProRequest) (*StoreIDProResponse, error)
	RetrieveRowByIDV2Pro(context.Context, *RetrieveRowByIDProRequest) (*RetrieveRowByIDProResponse, error)
	RetrieveVirtualValueV2Pro(context.Context, *RetrieveVirtualValueProRequest) (*RetrieveVirtualValueProResponse, error)
	UpdateVirtualValueV2Pro(context.Context, *UpdateVirtualValueProRequest) (*UpdateVirtualValueProResponse, error)
	SimplifiedStoreIDV2(context.Context, *SimplifiedStoreIDRequest) (*SimplifiedStoreIDResponse, error)
	FindSubKeysByIdPro(context.Context, *FindSubKeysRequest) (*FindSubKeysResponse, error)
	DeleteConfigV2(context.Context, *DeleteConfigRequest) (*DeleteConfigResponse, error)
	StoreCacheV2(context.Context, *StoreCacheRequest) (*StoreCacheResponse, error)
	RetrieveRowByCacheV2(context.Context, *RetrieveRowByCacheRequest) (*RetrieveRowByCacheResponse, error)
	mustEmbedUnimplementedIDMapServiceServer()
}

// UnimplementedIDMapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIDMapServiceServer struct {
}

func (UnimplementedIDMapServiceServer) StoreIDV2(context.Context, *StoreIDRequest) (*StoreIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreIDV2 not implemented")
}
func (UnimplementedIDMapServiceServer) RetrieveRowByIDV2(context.Context, *RetrieveRowByIDRequest) (*RetrieveRowByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveRowByIDV2 not implemented")
}
func (UnimplementedIDMapServiceServer) WriteConfigV2(context.Context, *WriteConfigRequest) (*WriteConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteConfigV2 not implemented")
}
func (UnimplementedIDMapServiceServer) ReadConfigV2(context.Context, *ReadConfigRequest) (*ReadConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadConfigV2 not implemented")
}
func (UnimplementedIDMapServiceServer) UpdateVirtualValueV2(context.Context, *UpdateVirtualValueRequest) (*UpdateVirtualValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualValueV2 not implemented")
}
func (UnimplementedIDMapServiceServer) RetrieveRealValueV2(context.Context, *RetrieveRealValueRequest) (*RetrieveRealValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveRealValueV2 not implemented")
}
func (UnimplementedIDMapServiceServer) RetrieveRealValueV2Pro(context.Context, *RetrieveRealValueRequestPro) (*RetrieveRealValueResponsePro, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveRealValueV2Pro not implemented")
}
func (UnimplementedIDMapServiceServer) RetrieveVirtualValueV2(context.Context, *RetrieveVirtualValueRequest) (*RetrieveVirtualValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveVirtualValueV2 not implemented")
}
func (UnimplementedIDMapServiceServer) StoreIDV2Pro(context.Context, *StoreIDProRequest) (*StoreIDProResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreIDV2Pro not implemented")
}
func (UnimplementedIDMapServiceServer) RetrieveRowByIDV2Pro(context.Context, *RetrieveRowByIDProRequest) (*RetrieveRowByIDProResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveRowByIDV2Pro not implemented")
}
func (UnimplementedIDMapServiceServer) RetrieveVirtualValueV2Pro(context.Context, *RetrieveVirtualValueProRequest) (*RetrieveVirtualValueProResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveVirtualValueV2Pro not implemented")
}
func (UnimplementedIDMapServiceServer) UpdateVirtualValueV2Pro(context.Context, *UpdateVirtualValueProRequest) (*UpdateVirtualValueProResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualValueV2Pro not implemented")
}
func (UnimplementedIDMapServiceServer) SimplifiedStoreIDV2(context.Context, *SimplifiedStoreIDRequest) (*SimplifiedStoreIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimplifiedStoreIDV2 not implemented")
}
func (UnimplementedIDMapServiceServer) FindSubKeysByIdPro(context.Context, *FindSubKeysRequest) (*FindSubKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSubKeysByIdPro not implemented")
}
func (UnimplementedIDMapServiceServer) DeleteConfigV2(context.Context, *DeleteConfigRequest) (*DeleteConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigV2 not implemented")
}
func (UnimplementedIDMapServiceServer) StoreCacheV2(context.Context, *StoreCacheRequest) (*StoreCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreCacheV2 not implemented")
}
func (UnimplementedIDMapServiceServer) RetrieveRowByCacheV2(context.Context, *RetrieveRowByCacheRequest) (*RetrieveRowByCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveRowByCacheV2 not implemented")
}
func (UnimplementedIDMapServiceServer) mustEmbedUnimplementedIDMapServiceServer() {}

// UnsafeIDMapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IDMapServiceServer will
// result in compilation errors.
type UnsafeIDMapServiceServer interface {
	mustEmbedUnimplementedIDMapServiceServer()
}

func RegisterIDMapServiceServer(s grpc.ServiceRegistrar, srv IDMapServiceServer) {
	s.RegisterService(&IDMapService_ServiceDesc, srv)
}

func _IDMapService_StoreIDV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).StoreIDV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/StoreIDV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).StoreIDV2(ctx, req.(*StoreIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_RetrieveRowByIDV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRowByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).RetrieveRowByIDV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/RetrieveRowByIDV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).RetrieveRowByIDV2(ctx, req.(*RetrieveRowByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_WriteConfigV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).WriteConfigV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/WriteConfigV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).WriteConfigV2(ctx, req.(*WriteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_ReadConfigV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).ReadConfigV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/ReadConfigV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).ReadConfigV2(ctx, req.(*ReadConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_UpdateVirtualValueV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVirtualValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).UpdateVirtualValueV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/UpdateVirtualValueV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).UpdateVirtualValueV2(ctx, req.(*UpdateVirtualValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_RetrieveRealValueV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRealValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).RetrieveRealValueV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/RetrieveRealValueV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).RetrieveRealValueV2(ctx, req.(*RetrieveRealValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_RetrieveRealValueV2Pro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRealValueRequestPro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).RetrieveRealValueV2Pro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/RetrieveRealValueV2Pro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).RetrieveRealValueV2Pro(ctx, req.(*RetrieveRealValueRequestPro))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_RetrieveVirtualValueV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveVirtualValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).RetrieveVirtualValueV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/RetrieveVirtualValueV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).RetrieveVirtualValueV2(ctx, req.(*RetrieveVirtualValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_StoreIDV2Pro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreIDProRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).StoreIDV2Pro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/StoreIDV2Pro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).StoreIDV2Pro(ctx, req.(*StoreIDProRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_RetrieveRowByIDV2Pro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRowByIDProRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).RetrieveRowByIDV2Pro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/RetrieveRowByIDV2Pro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).RetrieveRowByIDV2Pro(ctx, req.(*RetrieveRowByIDProRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_RetrieveVirtualValueV2Pro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveVirtualValueProRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).RetrieveVirtualValueV2Pro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/RetrieveVirtualValueV2Pro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).RetrieveVirtualValueV2Pro(ctx, req.(*RetrieveVirtualValueProRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_UpdateVirtualValueV2Pro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVirtualValueProRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).UpdateVirtualValueV2Pro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/UpdateVirtualValueV2Pro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).UpdateVirtualValueV2Pro(ctx, req.(*UpdateVirtualValueProRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_SimplifiedStoreIDV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimplifiedStoreIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).SimplifiedStoreIDV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/SimplifiedStoreIDV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).SimplifiedStoreIDV2(ctx, req.(*SimplifiedStoreIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_FindSubKeysByIdPro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSubKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).FindSubKeysByIdPro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/FindSubKeysByIdPro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).FindSubKeysByIdPro(ctx, req.(*FindSubKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_DeleteConfigV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).DeleteConfigV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/DeleteConfigV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).DeleteConfigV2(ctx, req.(*DeleteConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_StoreCacheV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).StoreCacheV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/StoreCacheV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).StoreCacheV2(ctx, req.(*StoreCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDMapService_RetrieveRowByCacheV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRowByCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMapServiceServer).RetrieveRowByCacheV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDMapService/RetrieveRowByCacheV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMapServiceServer).RetrieveRowByCacheV2(ctx, req.(*RetrieveRowByCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IDMapService_ServiceDesc is the grpc.ServiceDesc for IDMapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IDMapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IDMapService",
	HandlerType: (*IDMapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreIDV2",
			Handler:    _IDMapService_StoreIDV2_Handler,
		},
		{
			MethodName: "RetrieveRowByIDV2",
			Handler:    _IDMapService_RetrieveRowByIDV2_Handler,
		},
		{
			MethodName: "WriteConfigV2",
			Handler:    _IDMapService_WriteConfigV2_Handler,
		},
		{
			MethodName: "ReadConfigV2",
			Handler:    _IDMapService_ReadConfigV2_Handler,
		},
		{
			MethodName: "UpdateVirtualValueV2",
			Handler:    _IDMapService_UpdateVirtualValueV2_Handler,
		},
		{
			MethodName: "RetrieveRealValueV2",
			Handler:    _IDMapService_RetrieveRealValueV2_Handler,
		},
		{
			MethodName: "RetrieveRealValueV2Pro",
			Handler:    _IDMapService_RetrieveRealValueV2Pro_Handler,
		},
		{
			MethodName: "RetrieveVirtualValueV2",
			Handler:    _IDMapService_RetrieveVirtualValueV2_Handler,
		},
		{
			MethodName: "StoreIDV2Pro",
			Handler:    _IDMapService_StoreIDV2Pro_Handler,
		},
		{
			MethodName: "RetrieveRowByIDV2Pro",
			Handler:    _IDMapService_RetrieveRowByIDV2Pro_Handler,
		},
		{
			MethodName: "RetrieveVirtualValueV2Pro",
			Handler:    _IDMapService_RetrieveVirtualValueV2Pro_Handler,
		},
		{
			MethodName: "UpdateVirtualValueV2Pro",
			Handler:    _IDMapService_UpdateVirtualValueV2Pro_Handler,
		},
		{
			MethodName: "SimplifiedStoreIDV2",
			Handler:    _IDMapService_SimplifiedStoreIDV2_Handler,
		},
		{
			MethodName: "FindSubKeysByIdPro",
			Handler:    _IDMapService_FindSubKeysByIdPro_Handler,
		},
		{
			MethodName: "DeleteConfigV2",
			Handler:    _IDMapService_DeleteConfigV2_Handler,
		},
		{
			MethodName: "StoreCacheV2",
			Handler:    _IDMapService_StoreCacheV2_Handler,
		},
		{
			MethodName: "RetrieveRowByCacheV2",
			Handler:    _IDMapService_RetrieveRowByCacheV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idmap.proto",
}

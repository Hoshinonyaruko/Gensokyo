name: Cross Compile Go Project

on:
  pull_request:
    types: [opened, synchronize]
  push:
    tags:
      - '*'

jobs:
  build_frontend:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-frontend.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '19'

      - name: Cache Node modules
        id: cache-frontend
        uses: actions/cache@v2
        with:
          path: |
            frontend/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install Quasar CLI and dependencies
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        run: |
          cd frontend
          npm install -g @quasar/cli
          npm install
      
      - name: Build Quasar Project
        run: |
          cd frontend
          quasar build
      
      - name: Upload frontend artifact
        uses: actions/upload-artifact@v2
        with:
          name: frontend-build
          path: frontend/dist
  build_go:
    needs: build_frontend
    name: Build on ${{ matrix.os }} for ${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            goarch: amd64
          - os: linux
            goarch: 386
          - os: linux
            goarch: arm
          - os: linux
            goarch: arm64
          - os: darwin
            goarch: amd64
          - os: darwin
            goarch: arm64
          - os: windows
            goarch: amd64
          - os: windows
            goarch: 386
          - os: android
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.21.1' # Set to specific Go version.

    - name: Setup Android NDK (only for Android builds)
      if: matrix.os == 'android'
      run: |
        sudo apt-get install -y wget unzip
        wget https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip || exit 1
        unzip android-ndk-r21e-linux-x86_64.zip || exit 1
        export ANDROID_NDK_HOME=$PWD/android-ndk-r21e
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV

    - name: Create output directory
      run: mkdir -p output

    - name: Compile Go for target
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        go build -o output/gensokyo-${{ matrix.os }}-${{ matrix.goarch }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: gensokyo-${{ matrix.os }}-${{ matrix.goarch }}
        path: output/gensokyo-${{ matrix.os }}-${{ matrix.goarch }}

  prepare_release:
    needs: build_go
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: output

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false

      - name: Upload Release Assets
        run: |
          for asset_path in output/*; do
            asset_name=$(basename "${asset_path}")
            echo "Uploading ${asset_name}"
            curl \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: multipart/form-data" \
              -F "file=@${asset_path}" \
              "${{ steps.create_release.outputs.upload_url }}=${asset_name}&label=${asset_name}"
          done
name: Cross Compile Go Project

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  build:
    name: Build on ${{ matrix.os }} for ${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            goarch: amd64
          - os: linux
            goarch: 386
          - os: linux
            goarch: arm
          - os: linux
            goarch: arm64
          - os: darwin
            goarch: amd64
          - os: darwin
            goarch: arm64
          - os: windows
            goarch: amd64
          - os: windows
            goarch: 386
          - os: android
            goarch: arm64
          # ... Add other combinations as needed

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.21.1' # Set to specific Go version.

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '19'

    - name: Cache Node modules
      uses: actions/cache@v2
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Quasar CLI and dependencies
      run: |
        cd frontend
        npm install -g @quasar/cli
        npm install

    - name: Build Quasar Project
      run: |
        cd frontend
        quasar build

    - name: Setup Android NDK (only for Android builds)
      if: matrix.os == 'android'
      run: |
        sudo apt-get install -y wget unzip
        wget https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip || exit 1
        unzip android-ndk-r21e-linux-x86_64.zip || exit 1
        export ANDROID_NDK_HOME=$PWD/android-ndk-r21e
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV

    - name: Create output directory
      run: mkdir -p output

    - name: Compile Go for target
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        go build -o output/gensokyo-${{ matrix.os }}-${{ matrix.goarch }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: gensokyo-${{ matrix.os }}-${{ matrix.goarch }}
        path: output/gensokyo-${{ matrix.os }}-${{ matrix.goarch }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        prerelease: false
        draft: true

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      if: success() && startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./output/gensokyo-${{ matrix.os }}-${{ matrix.goarch }}
        asset_name: gensokyo-${{ matrix.os }}-${{ matrix.goarch }}.zip
        asset_content_type: application/zip
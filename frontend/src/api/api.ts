/* tslint:disable */
/* eslint-disable */
/**
 * nonebot-plugin-gocqhttp
 * go-cqhttp process manager API
 *
 * The version of the OpenAPI document: 0.6.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccountConfig
 */
export interface AccountConfig {
    /**
     * 
     * @type {number}
     * @memberof AccountConfig
     */
    'uin': number;
    /**
     * 
     * @type {string}
     * @memberof AccountConfig
     */
    'password'?: string;
    /**
     * 
     * @type {AccountProtocol}
     * @memberof AccountConfig
     */
    'protocol'?: AccountProtocol;
}
/**
 * 
 * @export
 * @interface AccountConfigFile
 */
export interface AccountConfigFile {
    /**
     * 
     * @type {string}
     * @memberof AccountConfigFile
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface AccountCreation
 */
export interface AccountCreation {
    /**
     * 
     * @type {string}
     * @memberof AccountCreation
     */
    'password'?: string;
    /**
     * 
     * @type {AccountProtocol}
     * @memberof AccountCreation
     */
    'protocol'?: AccountProtocol;
}
/**
 * 
 * @export
 * @interface AccountListItem
 */
export interface AccountListItem {
    /**
     * 
     * @type {number}
     * @memberof AccountListItem
     */
    'uin': number;
    /**
     * 
     * @type {boolean}
     * @memberof AccountListItem
     */
    'predefined': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountListItem
     */
    'process_created': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountListItem
     */
    'process_running': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AccountListItem
     */
    'process_connected': boolean;
    /**
     * 
     * @type {string}
     * @memberof AccountListItem
     */
    'nickname'?: string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const AccountProtocol = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2,
    NUMBER_3: 3,
    NUMBER_4: 4,
    NUMBER_5: 5,
    NUMBER_6: 6
} as const;

export type AccountProtocol = typeof AccountProtocol[keyof typeof AccountProtocol];


/**
 * 
 * @export
 * @interface Details
 */
export interface Details {
    /**
     * 
     * @type {number}
     * @memberof Details
     */
    'pid': number;
    /**
     * 
     * @type {string}
     * @memberof Details
     */
    'status': string;
    /**
     * 
     * @type {number}
     * @memberof Details
     */
    'memory_used': number;
    /**
     * 
     * @type {number}
     * @memberof Details
     */
    'cpu_percent': number;
    /**
     * 
     * @type {number}
     * @memberof Details
     */
    'start_time': number;
    /**
     * 
     * @type {number}
     * @memberof Details
     */
    'code': number;
}
/**
 * 
 * @export
 * @interface DeviceInfo
 */
export interface DeviceInfo {
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'product': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'device': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'board': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'brand': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'model': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'wifi_ssid': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'android_id': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'boot_id': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'proc_version': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'mac_address': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof DeviceInfo
     */
    'ip_address': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'imei': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'incremental'?: string;
    /**
     * 
     * @type {AccountProtocol}
     * @memberof DeviceInfo
     */
    'protocol': AccountProtocol;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'display': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'finger_print': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'baseband'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'sim'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'sim_info'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'os_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'bootloader'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'wifi_bssid': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'apn'?: string;
    /**
     * 
     * @type {VersionInfo}
     * @memberof DeviceInfo
     */
    'version': VersionInfo;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'imsi_md5': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'vendor_name': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceInfo
     */
    'vendor_os_name'?: string;
}


/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface ProcessInfo
 */
export interface ProcessInfo {
    /**
     * 
     * @type {ProcessStatus}
     * @memberof ProcessInfo
     */
    'status': ProcessStatus;
    /**
     * 
     * @type {number}
     * @memberof ProcessInfo
     */
    'total_logs': number;
    /**
     * 
     * @type {number}
     * @memberof ProcessInfo
     */
    'restarts': number;
    /**
     * 
     * @type {string}
     * @memberof ProcessInfo
     */
    'qr_uri'?: string;
    /**
     * 
     * @type {Details}
     * @memberof ProcessInfo
     */
    'details'?: Details;
}


/**
 * 
 * @export
 * @interface ProcessLog
 */
export interface ProcessLog {
    /**
     * 
     * @type {string}
     * @memberof ProcessLog
     */
    'time'?: string;
    /**
     * 
     * @type {ProcessLogLevel}
     * @memberof ProcessLog
     */
    'level'?: ProcessLogLevel;
    /**
     * 
     * @type {string}
     * @memberof ProcessLog
     */
    'message': string;
}
/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const ProcessLogLevel = {
    Stdout: 'STDOUT',
    Debug: 'DEBUG',
    Info: 'INFO',
    Warning: 'WARNING',
    Error: 'ERROR',
    Fatal: 'FATAL'
} as const;

export type ProcessLogLevel = typeof ProcessLogLevel[keyof typeof ProcessLogLevel];


/**
 * An enumeration.
 * @export
 * @enum {string}
 */

export const ProcessStatus = {
    Running: 'running',
    Stopped: 'stopped'
} as const;

export type ProcessStatus = typeof ProcessStatus[keyof typeof ProcessStatus];


/**
 * 
 * @export
 * @interface RunningProcessDetail
 */
export interface RunningProcessDetail {
    /**
     * 
     * @type {number}
     * @memberof RunningProcessDetail
     */
    'pid': number;
    /**
     * 
     * @type {string}
     * @memberof RunningProcessDetail
     */
    'status': string;
    /**
     * 
     * @type {number}
     * @memberof RunningProcessDetail
     */
    'memory_used': number;
    /**
     * 
     * @type {number}
     * @memberof RunningProcessDetail
     */
    'cpu_percent': number;
    /**
     * 
     * @type {number}
     * @memberof RunningProcessDetail
     */
    'start_time': number;
}
/**
 * 
 * @export
 * @interface SessionTokenFile
 */
export interface SessionTokenFile {
    /**
     * 
     * @type {string}
     * @memberof SessionTokenFile
     */
    'base64_content': string;
}
/**
 * 
 * @export
 * @interface StdinInputContent
 */
export interface StdinInputContent {
    /**
     * 
     * @type {string}
     * @memberof StdinInputContent
     */
    'input': string;
    /**
     * 
     * @type {boolean}
     * @memberof StdinInputContent
     */
    'linesep'?: boolean;
}
/**
 * 
 * @export
 * @interface StoppedProcessDetail
 */
export interface StoppedProcessDetail {
    /**
     * 
     * @type {number}
     * @memberof StoppedProcessDetail
     */
    'code': number;
}
/**
 * 
 * @export
 * @interface SystemDiskDetail
 */
export interface SystemDiskDetail {
    /**
     * 
     * @type {number}
     * @memberof SystemDiskDetail
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof SystemDiskDetail
     */
    'free': number;
    /**
     * 
     * @type {number}
     * @memberof SystemDiskDetail
     */
    'percent': number;
}
/**
 * 
 * @export
 * @interface SystemMemoryDetail
 */
export interface SystemMemoryDetail {
    /**
     * 
     * @type {number}
     * @memberof SystemMemoryDetail
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof SystemMemoryDetail
     */
    'available': number;
    /**
     * 
     * @type {number}
     * @memberof SystemMemoryDetail
     */
    'percent': number;
}
/**
 * 
 * @export
 * @interface SystemStatus
 */
export interface SystemStatus {
    /**
     * 
     * @type {number}
     * @memberof SystemStatus
     */
    'cpu_percent': number;
    /**
     * 
     * @type {SystemMemoryDetail}
     * @memberof SystemStatus
     */
    'memory': SystemMemoryDetail;
    /**
     * 
     * @type {SystemDiskDetail}
     * @memberof SystemStatus
     */
    'disk': SystemDiskDetail;
    /**
     * 
     * @type {number}
     * @memberof SystemStatus
     */
    'boot_time': number;
    /**
     * 
     * @type {RunningProcessDetail}
     * @memberof SystemStatus
     */
    'process': RunningProcessDetail;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {boolean}
     * @memberof LoginResponse
     */
    isLoggedIn: boolean;
}
/**
 * 
 * @export
 * @interface LoginStatusResponse
 */
export interface LoginStatusResponse {
    /**
     * 
     * @type {boolean}
     * @memberof LoginStatusResponse
     */
    isLoggedIn: boolean;

    /**
     * Error message if there's any issue.
     * 
     * @type {string}
     * @memberof LoginStatusResponse
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface VersionInfo
 */
export interface VersionInfo {
    /**
     * 
     * @type {string}
     * @memberof VersionInfo
     */
    'incremental': string;
    /**
     * 
     * @type {string}
     * @memberof VersionInfo
     */
    'release'?: string;
    /**
     * 
     * @type {string}
     * @memberof VersionInfo
     */
    'codename'?: string;
    /**
     * 
     * @type {number}
     * @memberof VersionInfo
     */
    'sdk'?: number;
}
export interface GuildOrChannelInfo {
    id: string;
    name: string;
    icon?: string;
    owner_id: string;
    owner: boolean;
    member_count?: number;
    max_members?: number;
    description?: string;
    joined_at?: string;
    channels?: ChannelInfo[]; // 假设我们也定义了一个ChannelInfo接口
    union_world_id?: string;
    union_org_id?: string;
    // ...其他字段
}

export interface ChannelInfo {
    name?: string; // Using '?' to indicate that the property is optional
    type?: number;
    position?: number;
    parentID?: string;
    ownerID?: string;
    subType?: number;
    privateType?: number;
    privateUserIDs?: string[];
    speakPermission?: number;
    applicationID?: string;
    permissions?: string;
    opUserID?: string;
}

/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Account Api
         * @param {number} uin 
         * @param {string} name 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountApiApiUinApiPost: async (uin: number, name: string, body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('accountApiApiUinApiPost', 'uin', uin)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('accountApiApiUinApiPost', 'name', name)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('accountApiApiUinApiPost', 'body', body)
            const localVarPath = `/api/{uin}/api`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Account Config Delete
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountConfigDeleteApiUinConfigDelete: async (uin: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('accountConfigDeleteApiUinConfigDelete', 'uin', uin)
            const localVarPath = `/api/{uin}/config`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Account Config Read
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountConfigReadApiUinConfigGet: async (uin: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('accountConfigReadApiUinConfigGet', 'uin', uin)
            const localVarPath = `/api/{uin}/config`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Account Config Write
         * @param {number} uin 
         * @param {AccountConfigFile} accountConfigFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountConfigWriteApiUinConfigPatch: async (uin: number, accountConfigFile: AccountConfigFile, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('accountConfigWriteApiUinConfigPatch', 'uin', uin)
            // verify required parameter 'accountConfigFile' is not null or undefined
            assertParamExists('accountConfigWriteApiUinConfigPatch', 'accountConfigFile', accountConfigFile)
            const localVarPath = `/api/{uin}/config`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(accountConfigFile, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Account Device Delete
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountDeviceDeleteApiUinDeviceDelete: async (uin: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('accountDeviceDeleteApiUinDeviceDelete', 'uin', uin)
            const localVarPath = `/api/{uin}/device`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Account Device Read
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountDeviceReadApiUinDeviceGet: async (uin: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('accountDeviceReadApiUinDeviceGet', 'uin', uin)
            const localVarPath = `/api/{uin}/device`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Account Device Write
         * @param {number} uin 
         * @param {DeviceInfo} deviceInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountDeviceWriteApiUinDevicePatch: async (uin: number, deviceInfo: DeviceInfo, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('accountDeviceWriteApiUinDevicePatch', 'uin', uin)
            // verify required parameter 'deviceInfo' is not null or undefined
            assertParamExists('accountDeviceWriteApiUinDevicePatch', 'deviceInfo', deviceInfo)
            const localVarPath = `/api/{uin}/device`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(deviceInfo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Account Session Delete
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountSessionDeleteApiUinSessionDelete: async (uin: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('accountSessionDeleteApiUinSessionDelete', 'uin', uin)
            const localVarPath = `/api/{uin}/session`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Account Session Read
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountSessionReadApiUinSessionGet: async (uin: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('accountSessionReadApiUinSessionGet', 'uin', uin)
            const localVarPath = `/api/{uin}/session`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Account Session Write
         * @param {number} uin 
         * @param {SessionTokenFile} sessionTokenFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountSessionWriteApiUinSessionPatch: async (uin: number, sessionTokenFile: SessionTokenFile, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('accountSessionWriteApiUinSessionPatch', 'uin', uin)
            // verify required parameter 'sessionTokenFile' is not null or undefined
            assertParamExists('accountSessionWriteApiUinSessionPatch', 'sessionTokenFile', sessionTokenFile)
            const localVarPath = `/api/{uin}/session`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(sessionTokenFile, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All Accounts
         * @param {number} [nicknameCache] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allAccountsApiAccountsGet: async (nicknameCache?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nicknameCache !== undefined) {
                localVarQueryParameter['nickname_cache'] = nicknameCache;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Account
         * @param {number} uin 
         * @param {AccountCreation} [accountCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccountApiUinPut: async (uin: number, accountCreation?: AccountCreation, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('createAccountApiUinPut', 'uin', uin)
            const localVarPath = `/api/{uin}`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreation, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Account
         * @param {number} uin 
         * @param {boolean} [withFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountApiUinDelete: async (uin: number, withFile?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('deleteAccountApiUinDelete', 'uin', uin)
            const localVarPath = `/api/{uin}`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (withFile !== undefined) {
                localVarQueryParameter['with_file'] = withFile;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process Input Line
         * @param {number} uin 
         * @param {StdinInputContent} stdinInputContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processInputLineApiUinProcessLogsPost: async (uin: number, stdinInputContent: StdinInputContent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('processInputLineApiUinProcessLogsPost', 'uin', uin)
            // verify required parameter 'stdinInputContent' is not null or undefined
            assertParamExists('processInputLineApiUinProcessLogsPost', 'stdinInputContent', stdinInputContent)
            const localVarPath = `/api/{uin}/process/logs`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = serializeDataIfNeeded(stdinInputContent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process Logs History
         * @param {number} uin 
         * @param {boolean} [reverse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processLogsHistoryApiUinProcessLogsGet: async (uin: number, reverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('processLogsHistoryApiUinProcessLogsGet', 'uin', uin)
            const localVarPath = `/api/{uin}/process/logs`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (reverse !== undefined) {
                localVarQueryParameter['reverse'] = reverse;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process Start
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processStartApiUinProcessPut: async (uin: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('processStartApiUinProcessPut', 'uin', uin)
            const localVarPath = `/api/{uin}/process`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process Status
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processStatusApiUinProcessStatusGet: async (uin: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('processStatusApiUinProcessStatusGet', 'uin', uin)
            const localVarPath = `/api/{uin}/process/status`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process Stop
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processStopApiUinProcessDelete: async (uin: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uin' is not null or undefined
            assertParamExists('processStopApiUinProcessDelete', 'uin', uin)
            const localVarPath = `/api/{uin}/process`
                .replace(`{${"uin"}}`, encodeURIComponent(String(uin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary System Logs History
         * @param {boolean} [reverse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemLogsHistoryApiLogsGet: async (reverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (reverse !== undefined) {
                localVarQueryParameter['reverse'] = reverse;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary System Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemStatusApiStatusGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 登录API
         * @param {string} username 用户名
         * @param {string} password 密码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApi: async (username: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginApi', 'username', username);
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginApi', 'password', password);
            const localVarPath = `/api/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const body = {
                username,
                password,
            };
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options, data: body };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 检查登录状态
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLoginStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/check-login-status`;
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            // Ensure withCredentials is true so cookies are sent with the request
            const withCredentialsOption = { withCredentials: true };

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...withCredentialsOption, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Account Api
         * @param {number} uin 
         * @param {string} name 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountApiApiUinApiPost(uin: number, name: string, body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountApiApiUinApiPost(uin, name, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Account Config Delete
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountConfigDeleteApiUinConfigDelete(uin: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountConfigDeleteApiUinConfigDelete(uin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Account Config Read
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountConfigReadApiUinConfigGet(uin: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountConfigFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountConfigReadApiUinConfigGet(uin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Account Config Write
         * @param {number} uin 
         * @param {AccountConfigFile} accountConfigFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountConfigWriteApiUinConfigPatch(uin: number, accountConfigFile: AccountConfigFile, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountConfigFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountConfigWriteApiUinConfigPatch(uin, accountConfigFile, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Account Device Delete
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountDeviceDeleteApiUinDeviceDelete(uin: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountDeviceDeleteApiUinDeviceDelete(uin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Account Device Read
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountDeviceReadApiUinDeviceGet(uin: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountDeviceReadApiUinDeviceGet(uin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Account Device Write
         * @param {number} uin 
         * @param {DeviceInfo} deviceInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountDeviceWriteApiUinDevicePatch(uin: number, deviceInfo: DeviceInfo, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountDeviceWriteApiUinDevicePatch(uin, deviceInfo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Account Session Delete
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountSessionDeleteApiUinSessionDelete(uin: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountSessionDeleteApiUinSessionDelete(uin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Account Session Read
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountSessionReadApiUinSessionGet(uin: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionTokenFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountSessionReadApiUinSessionGet(uin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Account Session Write
         * @param {number} uin 
         * @param {SessionTokenFile} sessionTokenFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountSessionWriteApiUinSessionPatch(uin: number, sessionTokenFile: SessionTokenFile, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionTokenFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountSessionWriteApiUinSessionPatch(uin, sessionTokenFile, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary All Accounts
         * @param {number} [nicknameCache] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allAccountsApiAccountsGet(nicknameCache?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountListItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allAccountsApiAccountsGet(nicknameCache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Account
         * @param {number} uin 
         * @param {AccountCreation} [accountCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAccountApiUinPut(uin: number, accountCreation?: AccountCreation, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAccountApiUinPut(uin, accountCreation, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Account
         * @param {number} uin 
         * @param {boolean} [withFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountApiUinDelete(uin: number, withFile?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccountApiUinDelete(uin, withFile, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Process Input Line
         * @param {number} uin 
         * @param {StdinInputContent} stdinInputContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processInputLineApiUinProcessLogsPost(uin: number, stdinInputContent: StdinInputContent, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processInputLineApiUinProcessLogsPost(uin, stdinInputContent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Process Logs History
         * @param {number} uin 
         * @param {boolean} [reverse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processLogsHistoryApiUinProcessLogsGet(uin: number, reverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProcessLog>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processLogsHistoryApiUinProcessLogsGet(uin, reverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Process Start
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processStartApiUinProcessPut(uin: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processStartApiUinProcessPut(uin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Process Status
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processStatusApiUinProcessStatusGet(uin: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processStatusApiUinProcessStatusGet(uin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Process Stop
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processStopApiUinProcessDelete(uin: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processStopApiUinProcessDelete(uin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary System Logs History
         * @param {boolean} [reverse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemLogsHistoryApiLogsGet(reverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemLogsHistoryApiLogsGet(reverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary System Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemStatusApiStatusGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemStatusApiStatusGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 登录API
         * @param {string} username 用户名
         * @param {string} password 密码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginApi(username: string, password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginApi(username, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },

        /**
         * 
         * @summary 检查登录状态
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkLoginStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkLoginStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Account Api
         * @param {number} uin 
         * @param {string} name 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountApiApiUinApiPost(uin: number, name: string, body: object, options?: any): AxiosPromise<any> {
            return localVarFp.accountApiApiUinApiPost(uin, name, body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Account Config Delete
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountConfigDeleteApiUinConfigDelete(uin: number, options?: any): AxiosPromise<void> {
            return localVarFp.accountConfigDeleteApiUinConfigDelete(uin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Account Config Read
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountConfigReadApiUinConfigGet(uin: number, options?: any): AxiosPromise<AccountConfigFile> {
            return localVarFp.accountConfigReadApiUinConfigGet(uin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Account Config Write
         * @param {number} uin 
         * @param {AccountConfigFile} accountConfigFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountConfigWriteApiUinConfigPatch(uin: number, accountConfigFile: AccountConfigFile, options?: any): AxiosPromise<AccountConfigFile> {
            return localVarFp.accountConfigWriteApiUinConfigPatch(uin, accountConfigFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Account Device Delete
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountDeviceDeleteApiUinDeviceDelete(uin: number, options?: any): AxiosPromise<void> {
            return localVarFp.accountDeviceDeleteApiUinDeviceDelete(uin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Account Device Read
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountDeviceReadApiUinDeviceGet(uin: number, options?: any): AxiosPromise<DeviceInfo> {
            return localVarFp.accountDeviceReadApiUinDeviceGet(uin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Account Device Write
         * @param {number} uin 
         * @param {DeviceInfo} deviceInfo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountDeviceWriteApiUinDevicePatch(uin: number, deviceInfo: DeviceInfo, options?: any): AxiosPromise<DeviceInfo> {
            return localVarFp.accountDeviceWriteApiUinDevicePatch(uin, deviceInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Account Session Delete
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountSessionDeleteApiUinSessionDelete(uin: number, options?: any): AxiosPromise<void> {
            return localVarFp.accountSessionDeleteApiUinSessionDelete(uin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Account Session Read
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountSessionReadApiUinSessionGet(uin: number, options?: any): AxiosPromise<SessionTokenFile> {
            return localVarFp.accountSessionReadApiUinSessionGet(uin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Account Session Write
         * @param {number} uin 
         * @param {SessionTokenFile} sessionTokenFile 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountSessionWriteApiUinSessionPatch(uin: number, sessionTokenFile: SessionTokenFile, options?: any): AxiosPromise<SessionTokenFile> {
            return localVarFp.accountSessionWriteApiUinSessionPatch(uin, sessionTokenFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary All Accounts
         * @param {number} [nicknameCache] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allAccountsApiAccountsGet(nicknameCache?: number, options?: any): AxiosPromise<Array<AccountListItem>> {
            return localVarFp.allAccountsApiAccountsGet(nicknameCache, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Account
         * @param {number} uin 
         * @param {AccountCreation} [accountCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAccountApiUinPut(uin: number, accountCreation?: AccountCreation, options?: any): AxiosPromise<AccountConfig> {
            return localVarFp.createAccountApiUinPut(uin, accountCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Account
         * @param {number} uin 
         * @param {boolean} [withFile] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountApiUinDelete(uin: number, withFile?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAccountApiUinDelete(uin, withFile, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process Input Line
         * @param {number} uin 
         * @param {StdinInputContent} stdinInputContent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processInputLineApiUinProcessLogsPost(uin: number, stdinInputContent: StdinInputContent, options?: any): AxiosPromise<void> {
            return localVarFp.processInputLineApiUinProcessLogsPost(uin, stdinInputContent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process Logs History
         * @param {number} uin 
         * @param {boolean} [reverse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processLogsHistoryApiUinProcessLogsGet(uin: number, reverse?: boolean, options?: any): AxiosPromise<Array<ProcessLog>> {
            return localVarFp.processLogsHistoryApiUinProcessLogsGet(uin, reverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process Start
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processStartApiUinProcessPut(uin: number, options?: any): AxiosPromise<ProcessInfo> {
            return localVarFp.processStartApiUinProcessPut(uin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process Status
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processStatusApiUinProcessStatusGet(uin: number, options?: any): AxiosPromise<ProcessInfo> {
            return localVarFp.processStatusApiUinProcessStatusGet(uin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process Stop
         * @param {number} uin 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processStopApiUinProcessDelete(uin: number, options?: any): AxiosPromise<void> {
            return localVarFp.processStopApiUinProcessDelete(uin, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary System Logs History
         * @param {boolean} [reverse] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemLogsHistoryApiLogsGet(reverse?: boolean, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.systemLogsHistoryApiLogsGet(reverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary System Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemStatusApiStatusGet(options?: any): AxiosPromise<SystemStatus> {
            return localVarFp.systemStatusApiStatusGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 登录API
         * @param {string} username 用户名
         * @param {string} password 密码
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApi(username: string, password: string, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.loginApi(username, password, options).then((request) => request(axios, basePath));
        },

        /**
         * 
         * @summary 检查登录状态
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLoginStatus(options?: any): AxiosPromise<LoginStatusResponse> {
            return localVarFp.checkLoginStatus(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * 
     * @summary Account Api
     * @param {number} uin 
     * @param {string} name 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public accountApiApiUinApiPost(uin: number, name: string, body: object, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).accountApiApiUinApiPost(uin, name, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Account Config Delete
     * @param {number} uin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public accountConfigDeleteApiUinConfigDelete(uin: number, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).accountConfigDeleteApiUinConfigDelete(uin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Account Config Read
     * @param {number} uin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public accountConfigReadApiUinConfigGet(uin: number, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).accountConfigReadApiUinConfigGet(uin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Account Config Write
     * @param {number} uin 
     * @param {AccountConfigFile} accountConfigFile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public accountConfigWriteApiUinConfigPatch(uin: number, accountConfigFile: AccountConfigFile, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).accountConfigWriteApiUinConfigPatch(uin, accountConfigFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Account Device Delete
     * @param {number} uin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public accountDeviceDeleteApiUinDeviceDelete(uin: number, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).accountDeviceDeleteApiUinDeviceDelete(uin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Account Device Read
     * @param {number} uin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public accountDeviceReadApiUinDeviceGet(uin: number, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).accountDeviceReadApiUinDeviceGet(uin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Account Device Write
     * @param {number} uin 
     * @param {DeviceInfo} deviceInfo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public accountDeviceWriteApiUinDevicePatch(uin: number, deviceInfo: DeviceInfo, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).accountDeviceWriteApiUinDevicePatch(uin, deviceInfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Account Session Delete
     * @param {number} uin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public accountSessionDeleteApiUinSessionDelete(uin: number, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).accountSessionDeleteApiUinSessionDelete(uin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Account Session Read
     * @param {number} uin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public accountSessionReadApiUinSessionGet(uin: number, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).accountSessionReadApiUinSessionGet(uin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Account Session Write
     * @param {number} uin 
     * @param {SessionTokenFile} sessionTokenFile 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public accountSessionWriteApiUinSessionPatch(uin: number, sessionTokenFile: SessionTokenFile, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).accountSessionWriteApiUinSessionPatch(uin, sessionTokenFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary All Accounts
     * @param {number} [nicknameCache] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public allAccountsApiAccountsGet(nicknameCache?: number, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).allAccountsApiAccountsGet(nicknameCache, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Account
     * @param {number} uin 
     * @param {AccountCreation} [accountCreation] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public createAccountApiUinPut(uin: number, accountCreation?: AccountCreation, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).createAccountApiUinPut(uin, accountCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Account
     * @param {number} uin 
     * @param {boolean} [withFile] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public deleteAccountApiUinDelete(uin: number, withFile?: boolean, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).deleteAccountApiUinDelete(uin, withFile, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process Input Line
     * @param {number} uin 
     * @param {StdinInputContent} stdinInputContent 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public processInputLineApiUinProcessLogsPost(uin: number, stdinInputContent: StdinInputContent, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).processInputLineApiUinProcessLogsPost(uin, stdinInputContent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process Logs History
     * @param {number} uin 
     * @param {boolean} [reverse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public processLogsHistoryApiUinProcessLogsGet(uin: number, reverse?: boolean, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).processLogsHistoryApiUinProcessLogsGet(uin, reverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process Start
     * @param {number} uin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public processStartApiUinProcessPut(uin: number, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).processStartApiUinProcessPut(uin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process Status
     * @param {number} uin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public processStatusApiUinProcessStatusGet(uin: number, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).processStatusApiUinProcessStatusGet(uin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process Stop
     * @param {number} uin 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public processStopApiUinProcessDelete(uin: number, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).processStopApiUinProcessDelete(uin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary System Logs History
     * @param {boolean} [reverse] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public systemLogsHistoryApiLogsGet(reverse?: boolean, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).systemLogsHistoryApiLogsGet(reverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary System Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public systemStatusApiStatusGet(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).systemStatusApiStatusGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 登录API
     * @param {string} username 用户名
     * @param {string} password 密码
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public loginApi(username: string, password: string, options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).loginApi(username, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 检查登录状态
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public checkLoginStatus(options?: AxiosRequestConfig) {
        return ApiApiFp(this.configuration).checkLoginStatus(options).then((request) => request(this.axios, this.basePath));
    }
}


